크롬 개발자 도구의 performance 탭은 웹 페이지의 성능 측정을 위해 가장 보편적으로 사용되는 도구입니다.
웹페이지의 로딩 과정을 기록하고 단계마다 걸리는 시간이나 렌더링 상태를 확인할 수 있습니다.

1.랜더링 블록
랜더링 블록은 말 그대로 브라우저의 html 랜더링을 막는 것입니다.
랜더링 블록은 html 파싱 중 자바스크립트 코드가 있거나 css가 있는 경우 발생합니다.
랜더링 블록이 발생하면 브라우저의 랜더링 과정을 지연시키기 때문에 적절한 방법을 사용하여 로딩 속도를 개선해야 한다.
[1]css의 랜더링 블록
초기 뷰포트 영역에 해당되는 css를 inline css로 삽입하는 방법
inline css : 외부 css파일의 내용을 html문서에 직접 삽입
critical css : 초기 뷰포트 영역에 해당되는 css를 inline css로 삽입하는 방법

[2]자바스크립트의 랜더링 블록
html의 닫는 body태그 바로 앞에 배치
자바스크립트 코드는 dom트리와 css트리를 동적으로 변경시킬 수 있기 때문에 브라우저는 html 파싱 중 script태그를 만나면
로딩 및 실행이 될 때까지 dom 트리 생성을 중단한다.

[3]레이아웃의 변경
레이아웃이 부모나 자식 요소들의 크기를 재계산하기 때문에 비용이 많이 들어간다.

2.메모리 누수 탐지하기
performance의 memory탭에서 확인할 수 있다.
memory탭에서 제공하는 측정타입
-heap snapshot : 자바스크립트 객체와 관련된 dom 노드 사이의 분포를 보여준다.
-allocation instrumentation on timeline : 시간의 흐름에 따라 메모리 누수를 기록하고 타임라인에 맞춰 분석할 수 있다.
-allocation sampling : 자바스크립트 함수를 기준으로 메모리를 측정
*
timeline에서 나타나는 파란색 막대는 할당된 메모리를 나타내며 메모리 삭제 시 회색 막대로 나타난다.

*
프랜트앤드 어플리케이션 개발 시에는 등록한 타이머를 clearTimeout() or clearInterval()을 통해 해제하지 않거나,
dom에 등록된 이벤트를 해제하지 않는 경우 또는 불필요한 클로저를 사용하는 경우 메모리 누수가 발생하곤 합니다.
